import { SecretError } from './secret_error.js';
import { AmplifyFault, AmplifyUserError } from '@aws-amplify/platform-core';
import { SSMServiceException } from '@aws-sdk/client-ssm';
/**
 * Handles errors and translate them to AmplifyUserError or AmplifyFaults
 * To be used exclusively by the amplify cli
 */
export class SSMSecretClientWithAmplifyErrorHandling {
    secretClient;
    /**
     * wraps the secretClient with Amplify CLI specific error handling
     */
    constructor(secretClient) {
        this.secretClient = secretClient;
    }
    getSecret = async (backendIdentifier, secretIdentifier) => {
        try {
            return await this.secretClient.getSecret(backendIdentifier, secretIdentifier);
        }
        catch (e) {
            throw this.translateToAmplifyError(e, 'Get', secretIdentifier);
        }
    };
    listSecrets = async (backendIdentifier) => {
        try {
            return await this.secretClient.listSecrets(backendIdentifier);
        }
        catch (e) {
            throw this.translateToAmplifyError(e, 'List');
        }
    };
    setSecret = async (backendIdentifier, secretName, secretValue) => {
        try {
            return await this.secretClient.setSecret(backendIdentifier, secretName, secretValue);
        }
        catch (e) {
            throw this.translateToAmplifyError(e, 'Set');
        }
    };
    removeSecret = async (backendIdentifier, secretName) => {
        try {
            return await this.secretClient.removeSecret(backendIdentifier, secretName);
        }
        catch (e) {
            throw this.translateToAmplifyError(e, 'Remove', { name: secretName });
        }
    };
    translateToAmplifyError = (error, apiName, secretIdentifier) => {
        if (error instanceof SecretError && error.cause) {
            if ([
                'UnrecognizedClientException',
                'AccessDeniedException',
                'NotAuthorized',
                'ExpiredTokenException',
                'ExpiredToken',
                'CredentialsProviderError',
                'IncompleteSignatureException',
                'InvalidSignatureException',
            ].includes(error.cause.name)) {
                return new AmplifyUserError('SSMCredentialsError', {
                    message: `Failed to ${apiName.toLowerCase()} secrets. ${error.cause.name}: ${error.cause?.message}`,
                    resolution: 'Make sure your AWS credentials are set up correctly, refreshed and have necessary permissions to call SSM service',
                });
            }
            if (error.cause.message.includes('connect ENOMEM')) {
                return new AmplifyUserError('InsufficientMemorySpaceError', {
                    message: `Failed to ${apiName.toLowerCase()} secrets. ${error.cause.name}: ${error.cause?.message}`,
                    resolution: 'There appears to be insufficient memory on your system to finish. Close other applications or restart your system and try again.',
                });
            }
            if (error.cause.name === 'ParameterNotFound' &&
                (apiName === 'Get' || apiName === 'Remove') &&
                secretIdentifier) {
                return new AmplifyUserError('SSMParameterNotFoundError', {
                    message: `Failed to ${apiName.toLowerCase()} ${secretIdentifier.name} secret. ${error.cause.name}: ${error.cause?.message}`,
                    resolution: `Make sure that ${secretIdentifier.name} has been set. See https://docs.amplify.aws/react/deploy-and-host/fullstack-branching/secrets-and-vars/.`,
                });
            }
            let downstreamException = error;
            if (!(error.cause instanceof SSMServiceException) &&
                error.cause instanceof Error) {
                downstreamException = error.cause;
            }
            throw new AmplifyFault(`${apiName}SecretsFailedFault`, {
                message: `Failed to ${apiName.toLowerCase()} secrets. ${error.cause.name}: ${error.cause?.message}`,
            }, downstreamException);
        }
        return error;
    };
}
//# sourceMappingURL=data:application/json;base64,