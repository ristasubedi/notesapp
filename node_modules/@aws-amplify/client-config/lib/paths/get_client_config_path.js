import fsp from 'fs/promises';
import path from 'path';
import { ClientConfigFormat } from '../index.js';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Get path to config file
 * @param fileName - name of the file to be used for client config. Can be different based on the version of the client config.
 * @param outDir - path to directory where config is written. If not provided defaults to current process working directory.
 * @param format - The format which the configuration should be exported into. Defaults to JSON.
 * returns path to config file
 */
export const getClientConfigPath = async (fileName, outDir, format) => {
    const defaultArgs = {
        out: process.cwd(),
        format: ClientConfigFormat.JSON,
    };
    format = format || defaultArgs.format;
    let targetPath = defaultArgs.out;
    if (outDir) {
        targetPath = path.isAbsolute(outDir)
            ? outDir
            : path.resolve(process.cwd(), outDir);
        try {
            await fsp.access(outDir);
        }
        catch (error) {
            // outDir does not exist, so create dir
            if (error instanceof Error && error.message.includes('ENOENT')) {
                try {
                    await fsp.mkdir(outDir, { recursive: true });
                }
                catch (error) {
                    if (error instanceof Error && error.message.includes('ENOENT')) {
                        throw new AmplifyUserError('InvalidPathError', {
                            message: `Directory ${outDir} could not be created.`,
                            resolution: 'Ensure that you have access for creating this file path and that the path is correct',
                        }, error);
                    }
                }
            }
            else {
                throw error;
            }
        }
    }
    let extension;
    switch (format) {
        case ClientConfigFormat.JSON_MOBILE:
            extension = 'json';
            break;
        default:
            extension = format;
            break;
    }
    targetPath = path.resolve(targetPath, `${fileName}.${extension}`);
    return targetPath;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X2NsaWVudF9jb25maWdfcGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXRocy9nZXRfY2xpZW50X2NvbmZpZ19wYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUM5QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUE0QixrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU5RDs7Ozs7O0dBTUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLEVBQ3RDLFFBQWtDLEVBQ2xDLE1BQWUsRUFDZixNQUEyQixFQUMzQixFQUFFO0lBQ0YsTUFBTSxXQUFXLEdBQUc7UUFDbEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUU7UUFDbEIsTUFBTSxFQUFFLGtCQUFrQixDQUFDLElBQUk7S0FDaEMsQ0FBQztJQUNGLE1BQU0sR0FBRyxNQUFNLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUV0QyxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDO0lBRWpDLElBQUksTUFBTSxFQUFFO1FBQ1YsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxNQUFNO1lBQ1IsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXhDLElBQUk7WUFDRixNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDMUI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLHVDQUF1QztZQUN2QyxJQUFJLEtBQUssWUFBWSxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzlELElBQUk7b0JBQ0YsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2lCQUM5QztnQkFBQyxPQUFPLEtBQUssRUFBRTtvQkFDZCxJQUFJLEtBQUssWUFBWSxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7d0JBQzlELE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsa0JBQWtCLEVBQ2xCOzRCQUNFLE9BQU8sRUFBRSxhQUFhLE1BQU0sd0JBQXdCOzRCQUNwRCxVQUFVLEVBQ1Isc0ZBQXNGO3lCQUN6RixFQUNELEtBQUssQ0FDTixDQUFDO3FCQUNIO2lCQUNGO2FBQ0Y7aUJBQU07Z0JBQ0wsTUFBTSxLQUFLLENBQUM7YUFDYjtTQUNGO0tBQ0Y7SUFFRCxJQUFJLFNBQWlCLENBQUM7SUFDdEIsUUFBUSxNQUFNLEVBQUU7UUFDZCxLQUFLLGtCQUFrQixDQUFDLFdBQVc7WUFDakMsU0FBUyxHQUFHLE1BQU0sQ0FBQztZQUNuQixNQUFNO1FBQ1I7WUFDRSxTQUFTLEdBQUcsTUFBTSxDQUFDO1lBQ25CLE1BQU07S0FDVDtJQUVELFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLFFBQVEsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdGaWxlQmFzZU5hbWUsIENsaWVudENvbmZpZ0Zvcm1hdCB9IGZyb20gJy4uL2luZGV4LmpzJztcbmltcG9ydCB7IEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbi8qKlxuICogR2V0IHBhdGggdG8gY29uZmlnIGZpbGVcbiAqIEBwYXJhbSBmaWxlTmFtZSAtIG5hbWUgb2YgdGhlIGZpbGUgdG8gYmUgdXNlZCBmb3IgY2xpZW50IGNvbmZpZy4gQ2FuIGJlIGRpZmZlcmVudCBiYXNlZCBvbiB0aGUgdmVyc2lvbiBvZiB0aGUgY2xpZW50IGNvbmZpZy5cbiAqIEBwYXJhbSBvdXREaXIgLSBwYXRoIHRvIGRpcmVjdG9yeSB3aGVyZSBjb25maWcgaXMgd3JpdHRlbi4gSWYgbm90IHByb3ZpZGVkIGRlZmF1bHRzIHRvIGN1cnJlbnQgcHJvY2VzcyB3b3JraW5nIGRpcmVjdG9yeS5cbiAqIEBwYXJhbSBmb3JtYXQgLSBUaGUgZm9ybWF0IHdoaWNoIHRoZSBjb25maWd1cmF0aW9uIHNob3VsZCBiZSBleHBvcnRlZCBpbnRvLiBEZWZhdWx0cyB0byBKU09OLlxuICogcmV0dXJucyBwYXRoIHRvIGNvbmZpZyBmaWxlXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRDbGllbnRDb25maWdQYXRoID0gYXN5bmMgKFxuICBmaWxlTmFtZTogQ2xpZW50Q29uZmlnRmlsZUJhc2VOYW1lLFxuICBvdXREaXI/OiBzdHJpbmcsXG4gIGZvcm1hdD86IENsaWVudENvbmZpZ0Zvcm1hdFxuKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRBcmdzID0ge1xuICAgIG91dDogcHJvY2Vzcy5jd2QoKSxcbiAgICBmb3JtYXQ6IENsaWVudENvbmZpZ0Zvcm1hdC5KU09OLFxuICB9O1xuICBmb3JtYXQgPSBmb3JtYXQgfHwgZGVmYXVsdEFyZ3MuZm9ybWF0O1xuXG4gIGxldCB0YXJnZXRQYXRoID0gZGVmYXVsdEFyZ3Mub3V0O1xuXG4gIGlmIChvdXREaXIpIHtcbiAgICB0YXJnZXRQYXRoID0gcGF0aC5pc0Fic29sdXRlKG91dERpcilcbiAgICAgID8gb3V0RGlyXG4gICAgICA6IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBvdXREaXIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGZzcC5hY2Nlc3Mob3V0RGlyKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gb3V0RGlyIGRvZXMgbm90IGV4aXN0LCBzbyBjcmVhdGUgZGlyXG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdFTk9FTlQnKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IGZzcC5ta2RpcihvdXREaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ0VOT0VOVCcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgICAgICAgJ0ludmFsaWRQYXRoRXJyb3InLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYERpcmVjdG9yeSAke291dERpcn0gY291bGQgbm90IGJlIGNyZWF0ZWQuYCxcbiAgICAgICAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgICAgICAgJ0Vuc3VyZSB0aGF0IHlvdSBoYXZlIGFjY2VzcyBmb3IgY3JlYXRpbmcgdGhpcyBmaWxlIHBhdGggYW5kIHRoYXQgdGhlIHBhdGggaXMgY29ycmVjdCcsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGV0IGV4dGVuc2lvbjogc3RyaW5nO1xuICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgIGNhc2UgQ2xpZW50Q29uZmlnRm9ybWF0LkpTT05fTU9CSUxFOlxuICAgICAgZXh0ZW5zaW9uID0gJ2pzb24nO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGV4dGVuc2lvbiA9IGZvcm1hdDtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgdGFyZ2V0UGF0aCA9IHBhdGgucmVzb2x2ZSh0YXJnZXRQYXRoLCBgJHtmaWxlTmFtZX0uJHtleHRlbnNpb259YCk7XG4gIHJldHVybiB0YXJnZXRQYXRoO1xufTtcbiJdfQ==